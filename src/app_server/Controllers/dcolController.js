const FTP = require('ftp');
const mysql = require('mysql2/promise');
const path = require('path');
try {
    var config = require("../../config/Zconfig.json");
} catch(e) {
    var config = {};
}
var dcolJSONcontroller = require('./dcolJSONController');
const stream = require('stream');
const monitoringIntervals = {};
const runningProcesses = {};

const tableHeaders = {
    dcollect_a:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DCAAIX', 'DCAASP', 'DCAASSOC', 'DCACACI', 'DCACAS', 'DCACIS', 'DCACISZ', 'DCADATA', 'DCADLR', 'DCADSNAM', 'DCAESDS', 'DCAEXC', 'DCAFLAG1', 'DCAFLAG2', 'DCAG4G', 'DCAHARBA', 'DCAHARBC', 'DCAHURBA', 'DCAHURBC', 'DCAINDEX', 'DCAINR', 'DCAIXUPG', 'DCAKLN', 'DCAKRDS', 'DCAKR1ST', 'DCAKSDS', 'DCALDS', 'DCANLR', 'DCANSTAT', 'DCARKP', 'DCARRDS', 'DCARTR', 'DCASRCI', 'DCASSOC_LEN', 'DCATRDT', 'DCAUPR', 'DCAVRRDS', 'DCAZFS'],
    dcollect_ai:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DAIDATA_LEN', 'DAIDDATE', 'DAIDDSMR', 'DAIDDSNM', 'DAIDRTN', 'DAIDSRID', 'DAIDTIME', 'DAIGDATE', 'DAIGDSMR', 'DAIGDSNM', 'DAIGRTN', 'DAIGSRID', 'DAIGTIME', 'DAIMDATE', 'DAIMDSMR', 'DAIMDSNM', 'DAIMRTN', 'DAIMSRID', 'DAIMTIME', 'DAISDATE', 'DAISDSMR', 'DAISDSNM', 'DAISRTN', 'DAISSRID', 'DAISTIME'],
    dcollect_bc:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DBCASMS', 'DBCCDMP', 'DBCCYLCP', 'DBCDATA_LEN', 'DBCDATE', 'DBCDEFMC', 'DBCDESC', 'DBCDGEOM', 'DBCDUNIT', 'DBCFLAGS', 'DBCFLGDC', 'DBCFSYSN', 'DBCINVAL', 'DBCMCLEN', 'DBCMCNAM', 'DBCPDSE', 'DBCSCDSN', 'DBCSEPNL', 'DBCSEPNM', 'DBCSESC', 'DBCSFEAT', 'DBCSNMTY', 'DBCSRST', 'DBCSTAT', 'DBCSYSDT', 'DBCSYSFT', 'DBCSYSNM', 'DBCSYSNS', 'DBCSYSNT', 'DBCSYSPL', 'DBCSYSTM', 'DBCTIME', 'DBCTRKSZ', 'DBCUNKWN', 'DBCUSER', 'DBCVALID', 'DBC32NAM'],
    dcollect_d:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DCDACCT', 'DCDADSI_LEN', 'DCDAENCR', 'DCDAKLBL', 'DCDALLFG', 'DCDALLFX', 'DCDALLSP', 'DCDALLSX', 'DCDATYPE', 'DCDBDSZ', 'DCDBKLNG', 'DCDCATF', 'DCDCCSID', 'DCDCGENC', 'DCDCHIND', 'DCDCKDSI', 'DCDCMPTV', 'DCDCNCMP', 'DCDCPOIT', 'DCDCREDT', 'DCDCTLRD', 'DCDCTYPE', 'DCDCUDSZ', 'DCDCZEDC', 'DCDDATCL', 'DCDDCLAS', 'DCDDCLNG', 'DCDDDMEX', 'DCDDSCBF', 'DCDDSGDA', 'DCDDSGGS', 'DCDDSGIS', 'DCDDSGPO', 'DCDDSGPS', 'DCDDSGU', 'DCDDSGVS', 'DCDDSNAM', 'DCDDSORG', 'DCDDSOR0', 'DCDDSOR1', 'DCDDSSER', 'DCDDS9CR', 'DCDDS9F1', 'DCDEATRC', 'DCDEATRV', 'DCDEDVVR', 'DCDEMNGD', 'DCDERROR', 'DCDEXFLG', 'DCDEXPDT', 'DCDFCAR', 'DCDFLAG1', 'DCDFLAG2', 'DCDFLAG3', 'DCDFLAG5', 'DCDGDS', 'DCDGT64K', 'DCDINICF', 'DCDINTCG', 'DCDJBNMC', 'DCDLBKDT', 'DCDLRECL', 'DCDLSTRF', 'DCDMCLAS', 'DCDMCLNG', 'DCDMGTCL', 'DCDNMBFG', 'DCDNMBFX', 'DCDNMBLK', 'DCDNMBLX', 'DCDNMEXT', 'DCDNOFM1', 'DCDNOSPC', 'DCDNOVVR', 'DCDOVERA', 'DCDPDSE', 'DCDPDSEX', 'DCDRACFD', 'DCDREBLK', 'DCDRECFA', 'DCDRECFB', 'DCDRECFC', 'DCDRECFF', 'DCDRECFM', 'DCDRECFS', 'DCDRECFT', 'DCDRECFU', 'DCDRECFV', 'DCDRECRD', 'DCDSCAFX', 'DCDSCALL', 'DCDSCALX', 'DCDSCLAS', 'DCDSCLNG', 'DCDSCNT', 'DCDSECFG', 'DCDSGLNG', 'DCDSMSM', 'DCDSTGCL', 'DCDSTGRP', 'DCDSTNMC', 'DCDSTOGP', 'DCDSTRP', 'DCDTEMP', 'DCDTIMEC', 'DCDUDSIZ', 'DCDUSEFG', 'DCDUSEFX', 'DCDUSESP', 'DCDUSESX', 'DCDVOLSQ', 'DCDVOLSR', 'DCDVSAMI', 'DCDXPSEV'],
    dcollect_dc:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DDCAUNIT', 'DDCAVREC', 'DDCA2GB', 'DDCBLK', 'DDCBLKLM', 'DDCBLMT', 'DDCBSZLM', 'DDCBWOCI', 'DDCBWOIM', 'DDCBWONO', 'DDCBWOS', 'DDCBWOTP', 'DDCBYTES', 'DDCCAMT', 'DDCCAPCT', 'DDCCFS', 'DDCCIPCT', 'DDCCISZ', 'DDCCNTL', 'DDCCNTLA', 'DDCCNTLM', 'DDCCNTLN', 'DDCCNUL', 'DDCCOMP', 'DDCCT', 'DDCDATA_LEN', 'DDCDATE', 'DDCDESC', 'DDCDIBLK', 'DDCDKLBL', 'DDCDKLBN', 'DDCDSCF', 'DDCDSEXC', 'DDCDSEXR', 'DDCDSFLG', 'DDCDSHFS', 'DDCDSLIB', 'DDCDSLRG', 'DDCDSNTY', 'DDCDSNUL', 'DDCDSNXT', 'DDCDSPDS', 'DDCDVC', 'DDCDVCS', 'DDCEANUL', 'DDCEATNO', 'DDCEATOP', 'DDCEATTR', 'DDCEEFM2', 'DDCEEFM3', 'DDCEEFM4', 'DDCEFMT1', 'DDCEFMT2', 'DDCEFMT3', 'DDCEFMT4', 'DDCEXPDY', 'DDCEXPYR', 'DDCEX255', 'DDCFATTR', 'DDCFAUN', 'DDCFAVR', 'DDCFA2GB', 'DDCFCAF', 'DDCFCIF', 'DDCFCIS', 'DDCFCOMP', 'DDCFCT', 'DDCFDIR', 'DDCFEXP', 'DDCFEXTC', 'DDCFIMBD', 'DDCFKLBL', 'DDCFKLEN', 'DDCFKOFF', 'DDCFKYC1', 'DDCFKYC2', 'DDCFKYL1', 'DDCFKYL2', 'DDCFLOGR', 'DDCFLREC', 'DDCFMEDI', 'DDCFMF', 'DDCFMFB', 'DDCFMFBS', 'DDCFMFS', 'DDCFMNUL', 'DDCFMU', 'DDCFMV', 'DDCFMVB', 'DDCFMVBS', 'DDCFMVS', 'DDCFOVRD', 'DDCFPSEG', 'DDCFPSP', 'DDCFRECT', 'DDCFRET', 'DDCFRFM', 'DDCFRLGS', 'DDCFRLOG', 'DDCFRMOD', 'DDCFRORG', 'DDCFRPLC', 'DDCFRSP', 'DDCFSCAL', 'DDCFSDB', 'DDCFSSP', 'DDCFVEA', 'DDCFVOL', 'DDCFVSP', 'DDCFXREG', 'DDCFXSYS', 'DDCGSRDU', 'DDCIDRC', 'DDCIMBED', 'DDCKB', 'DDCKLBL1', 'DDCKLBL2', 'DDCKLBN1', 'DDCKLBN2', 'DDCKLEN', 'DDCKOFF', 'DDCKYCD1', 'DDCKYCD2', 'DDCLOGAL', 'DDCLOGID', 'DDCLOGLN', 'DDCLOGNM', 'DDCLOGNO', 'DDCLOGRC', 'DDCLOGRP', 'DDCLOGRS', 'DDCLOGUN', 'DDCLRECL', 'DDCLSIDS', 'DDCMB', 'DDCMEDA1', 'DDCMEDA2', 'DDCMEDA3', 'DDCMEDA4', 'DDCMEDA5', 'DDCMEDA6', 'DDCMEDA7', 'DDCMEDA8', 'DDCMEDA9', 'DDCMEDIA', 'DDCMED10', 'DDCMED11', 'DDCMED12', 'DDCMED13', 'DDCMENUL', 'DDCNAME', 'DDCNMFLD', 'DDCNMLEN', 'DDCNOCMP', 'DDCORGES', 'DDCORGKS', 'DDCORGLS', 'DDCORGNL', 'DDCORGRR', 'DDCOVRD', 'DDCPSCA', 'DDCPSEG', 'DDCRABS', 'DDCRABSY', 'DDCRABUS', 'DDCRADO', 'DDCRADW', 'DDCRASO', 'DDCRASW', 'DDCRBIAS', 'DDCRBYTE', 'DDCRCORG', 'DDCRECFM', 'DDCRECLM', 'DDCRECTE', 'DDCREDUC', 'DDCREDUS', 'DDCREPLC', 'DDCRETPD', 'DDCREUSE', 'DDCRLS1', 'DDCRMODE', 'DDCRTNUL', 'DDCSDB', 'DDCSFLG', 'DDCSHROP', 'DDCSPAND', 'DDCSPANN', 'DDCSPANS', 'DDCSPANY', 'DDCSPEC', 'DDCSPECA', 'DDCSPECB', 'DDCSPECC', 'DDCSPECD', 'DDCSPEC1', 'DDCSPEC2', 'DDCSPEC3', 'DDCSPEC4', 'DDCSPEED', 'DDCSPPRI', 'DDCSPRLF', 'DDCSPSEC', 'DDCSTSP', 'DDCTIME', 'DDCUSER', 'DDCVBYT1', 'DDCVINDX', 'DDCVOLCT', 'DDCVSPU', 'DDCVSPUK', 'DDCVSPUM', 'DDCVSPV', 'DDCXREG', 'DDCXSYS', 'DDC128TK', 'DDC18TRK', 'DDC256TK', 'DDC36TRK', 'DDC384TK'],
    dcollect_lb:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DLBCFCS', 'DLBCURST', 'DLBDATA_LEN', 'DLBDCLEN', 'DLBDCLNM', 'DLBDCNAM', 'DLBDCONS', 'DLBDDATE', 'DLBDEFDC', 'DLBDTAPE', 'DLBDTIME', 'DLBDTYPE', 'DLBDUSER', 'DLBD3995', 'DLBD9246', 'DLBEDUNM', 'DLBEDVT', 'DLBEJD', 'DLBFLAGS', 'DLBKEEP', 'DLBLCBID', 'DLBLNAME', 'DLBLPENO', 'DLBNAME', 'DLBNMFLD', 'DLBNMLEN', 'DLBNOCON', 'DLBNOOPT', 'DLBNORST', 'DLBNSTAT', 'DLBOFFLN', 'DLBOMST', 'DLBONLN', 'DLBPRVT', 'DLBPSEUD', 'DLBPURGE', 'DLBREAL', 'DLBREQST', 'DLBSCRT', 'DLBSOUT', 'DLBSTAT', 'DLBSYSST', 'DLBTYPE', 'DLB32NAM'],
    dcollect_mc:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DMCACGT', 'DMCACLTE', 'DMCARNOL', 'DMCAUTBK', 'DMCBADM', 'DMCBADU', 'DMCBBOTH', 'DMCBKDY', 'DMCBKFLG', 'DMCBKFQ', 'DMCBKNP', 'DMCBKUDC', 'DMCBKVS', 'DMCBNONE', 'DMCBVRD', 'DMCCLLEN', 'DMCCLNAM', 'DMCCLOUD', 'DMCCL2DY', 'DMCCMAU', 'DMCCPYPR', 'DMCCPYRQ', 'DMCCPYST', 'DMCCPYTC', 'DMCCPYTF', 'DMCCTCPY', 'DMCCTSRL', 'DMCDATA_LEN', 'DMCDATE', 'DMCDESC', 'DMCDTNOL', 'DMCDYNOL', 'DMCEAARC', 'DMCEADEL', 'DMCEANUL', 'DMCEDAY', 'DMCEXDAT', 'DMCEXPAC', 'DMCEXPDY', 'DMCEXPF', 'DMCEYEAR', 'DMCFBKFQ', 'DMCFBVER', 'DMCFBVRD', 'DMCFCTCP', 'DMCFCTSR', 'DMCFDATE', 'DMCFDAYS', 'DMCFEXDT', 'DMCFEXDY', 'DMCFIRST', 'DMCFL1DY', 'DMCFPELE', 'DMCFPRDY', 'DMCFRBK', 'DMCFRLMG', 'DMCFRNP', 'DMCGDGFL', 'DMCLAST', 'DMCL1DY', 'DMCL1NOL', 'DMCL2LIM', 'DMCMBOTH', 'DMCMCMD', 'DMCMIGF', 'DMCMNONE', 'DMCMRETF', 'DMCMRTDY', 'DMCNAME', 'DMCNMFLD', 'DMCNMLEN', 'DMCNPNOL', 'DMCNULL', 'DMCPELEM', 'DMCPEMN', 'DMCPEQD', 'DMCPEQM', 'DMCPERD', 'DMCPEYD', 'DMCPEYM', 'DMCPRCN', 'DMCPRDY', 'DMCPREL', 'DMCPRIM', 'DMCRBNOL', 'DMCRDARC', 'DMCRETF', 'DMCRFMT', 'DMCRLF', 'DMCRLFCI', 'DMCRLFCN', 'DMCRLFNO', 'DMCRLFYE', 'DMCRLFYI', 'DMCRLOMG', 'DMCRPNOL', 'DMCSPEC1', 'DMCSPEC2', 'DMCSZGT', 'DMCSZLTE', 'DMCTCDY', 'DMCTCMN', 'DMCTCYR', 'DMCTIME', 'DMCTSCR', 'DMCTSDY', 'DMCTSLU', 'DMCTSMN', 'DMCTSYR', 'DMCUSER', 'DMCVPMD', 'DMCVPQD', 'DMCVPQM', 'DMCVPQT', 'DMCVPRD', 'DMCVPYD', 'DMCVPYM', 'DMCVPYR', 'DMCVSCD', 'DMCVSCM', 'DMCVSCR', 'DMCVSCY', 'DMCVSLU', 'DMCVSUD', 'DMCVSUM', 'DMCVSUY'],
    dcollect_sc:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DSCACCES', 'DSCACCNP', 'DSCACCPR', 'DSCACCRQ', 'DSCACCST', 'DSCAVAIL', 'DSCAVLCN', 'DSCAVLDC', 'DSCAVLPR', 'DSCAVLST', 'DSCBAKUP', 'DSCBIADC', 'DSCBIARD', 'DSCBIAWR', 'DSCBUSP', 'DSCCCHST', 'DSCCMMFT', 'DSCCSLEN', 'DSCCSNAM', 'DSCDATA_LEN', 'DSCDATE', 'DSCDCLS', 'DSCDESC', 'DSCDFACC', 'DSCDFAVL', 'DSCDFGSP', 'DSCDFSDR', 'DSCDIRB', 'DSCDIRCW', 'DSCDIRR', 'DSCDSSEP', 'DSCFDCFW', 'DSCFDCLS', 'DSCFDIRB', 'DSCFDIRR', 'DSCFIAD', 'DSCFLAGS', 'DSCFLAG2', 'DSCFLAG3', 'DSCFOLS', 'DSCFSCFW', 'DSCFSEQB', 'DSCFSEQR', 'DSCHLERD', 'DSCHLEWR', 'DSCIACDL', 'DSCNAME', 'DSCNMFLD', 'DSCNMLEN', 'DSCPAV', 'DSCPAVS', 'DSCSEQB', 'DSCSEQCW', 'DSCSEQR', 'DSCSTOSL', 'DSCSTSDR', 'DSCSYNCD', 'DSCTIER', 'DSCTIERS', 'DSCTIME', 'DSCUSER', 'DSCVERSN', 'DSCVERSP', 'DSCVFLG2'],
    dcollect_sg:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DSGABSYS', 'DSGADSYS', 'DSGAMSYS', 'DSGCNFRM', 'DSGCNSMS', 'DSGCSMSS', 'DSGCYLED', 'DSGCYLST', 'DSGDATA_LEN', 'DSGDATE', 'DSGDESC', 'DSGDIS', 'DSGDISN', 'DSGDMPCL', 'DSGDRVST', 'DSGDUMMY', 'DSGENBL', 'DSGEXNLN', 'DSGEXNM', 'DSGFABUP', 'DSGFADMP', 'DSGFAMIG', 'DSGFCYS', 'DSGFDELP', 'DSGFDRST', 'DSGFGBKU', 'DSGFHTHR', 'DSGFIMIG', 'DSGFLAGS', 'DSGFLGDC', 'DSGFLTHR', 'DSGFPRST', 'DSGFPSM', 'DSGFRETP', 'DSGFTHRS', 'DSGFTYPE', 'DSGFVLFT', 'DSGFVMAX', 'DSGFVUNT', 'DSGGBKUF', 'DSGGBNOL', 'DSGNAME', 'DSGNMFLD', 'DSGNMLEN', 'DSGOAMFL', 'DSGOAMID', 'DSGOBJ', 'DSGOBJBK', 'DSGOFLOW', 'DSGOLBNL', 'DSGOLBNM', 'DSGOLIBS', 'DSGPOOL', 'DSGQUI', 'DSGQUIN', 'DSGRERV', 'DSGSBKPT', 'DSGSHTHR', 'DSGSLTHR', 'DSGSSTAT', 'DSGSTAT', 'DSGSYSST', 'DSGTAPE', 'DSGTARGT', 'DSGTBLGR', 'DSGTIME', 'DSGTMSAP', 'DSGTOTAP', 'DSGUSER', 'DSGVFERR', 'DSGVFFER', 'DSGVIO', 'DSGVOLFT', 'DSG0', 'DSG32NAM'],
    dcollect_v:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DCVALLOC', 'DCVCYLMG', 'DCVDPTYP', 'DCVDVNUM', 'DCVDVTYP', 'DCVEAVOL', 'DCVEBYTK', 'DCVELSPC', 'DCVERROR', 'DCVEVLCP', 'DCVFCYLS', 'DCVFDSCB', 'DCVFLAG1', 'DCVFRAGI', 'DCVFRESP', 'DCVFREXT', 'DCVFTRKS', 'DCVFVIRS', 'DCVINITL', 'DCVINXEN', 'DCVINXEX', 'DCVINXST', 'DCVLGEXT', 'DCVMANGD', 'DCVNMNGD', 'DCVPERCT', 'DCVPHYST', 'DCVSGLNG', 'DCVSGTCL', 'DCVSHRDS', 'DCVSTGGP', 'DCVTRALC', 'DCVTRFRG', 'DCVTRFRX', 'DCVTRFSP', 'DCVTRLGE', 'DCVTRPCT', 'DCVTRVLC', 'DCVUSATR', 'DCVUSPUB', 'DCVUSPVT', 'DCVUSSTO', 'DCVVLCAP', 'DCVVOLI_LEN', 'DCVVOLSR'],
    dcollect_vl:['TIMESTAMP', 'DCUBCVER', 'DCUDATE', 'DCULENG', 'DCUOUTH_LEN', 'DCURCTYP', 'DCURDW', 'DCUSGVER', 'DCUSYSID', 'DCUTIME', 'DCUTMSTP', 'DCUVERS', 'DCUVERSC', 'DCUVERS1', 'DCUVERS2', 'DVLBOXED', 'DVLCNSMS', 'DVLCONV', 'DVLCSMSS', 'DVLDATA_LEN', 'DVLDATE', 'DVLDIS', 'DVLDISN', 'DVLENBL', 'DVLFLAGS', 'DVLFLGDC', 'DVLMVSS', 'DVLNFREE', 'DVLNLEVL', 'DVLNLEXT', 'DVLNMFLD', 'DVLNMLEN', 'DVLNRDY', 'DVLNSTAT', 'DVLNTCPY', 'DVLNUCBA', 'DVLN0CNT', 'DVLOFFLN', 'DVLONLN', 'DVLPOFF', 'DVLQUI', 'DVLQUIN', 'DVLROA', 'DVLSG', 'DVLSGLEN', 'DVLSMSS', 'DVLSSTAT', 'DVLSTGRP', 'DVLSTMVS', 'DVLSTSMS', 'DVLTIME', 'DVLTRKCP', 'DVLTRKEX', 'DVLTRKFR', 'DVLTRKSZ', 'DVLUSER', 'DVLVSER', 'DVL0', 'DVL32NAM'],
    
    
    };

function parseDirName(dirName) {
    const parts = dirName.split('_');
    if (parts.length >= 3 && parts[0].startsWith('D') && parts[0].length === 7 && parts[1].startsWith('T') && parts[1].length === 7) {
        const dateStr = parts[0].slice(1);
        const timeStr = parts[1].slice(1);
        const year = '20' + dateStr.slice(0, 2);
        const month = dateStr.slice(2, 4);
        const day = dateStr.slice(4, 6);
        const hour = timeStr.slice(0, 2);
        const minute = timeStr.slice(2, 4);
        const second = timeStr.slice(4, 6);
        return new Date(`${year}-${month}-${day}T${hour}:${minute}:${second}`);
    }
    return null;
}

function getTableNameFromFileName(fileName) {
    const metric = fileName.split('_')[1].split('.')[0].toLowerCase();
    return `dcollect_${metric}`;
}

async function createTables(connection) {
    console.log('Creating/checking tables...');
    
    // First check if tables exist
    const [tables] = await connection.query('SHOW TABLES');
    const existingTables = tables.map(t => Object.values(t)[0]);
    console.log('Existing tables:', existingTables);

    const createTableQueries = [
        `CREATE TABLE IF NOT EXISTS dcollect_a (
            id INT NOT NULL AUTO_INCREMENT,
            TIMESTAMP DATETIME DEFAULT NULL,
            DCUBCVER INT DEFAULT NULL,
            DCUDATE DATETIME DEFAULT NULL,
            DCULENG INT DEFAULT NULL,
            DCUOUTH_LEN INT DEFAULT NULL,
            DCURCTYP CHAR(1) DEFAULT NULL,
            DCURDW BIGINT DEFAULT NULL,
            DCUSGVER INT DEFAULT NULL,
            DCUSYSID VARCHAR(4) DEFAULT NULL,
            DCUTIME TIME DEFAULT NULL,
            DCUTMSTP VARCHAR(16) DEFAULT NULL,
            DCUVERS INT DEFAULT NULL,
            DCUVERSC INT DEFAULT NULL,
            DCUVERS1 INT DEFAULT NULL,
            DCUVERS2 INT DEFAULT NULL,
            DCAAIX INT DEFAULT NULL,
            DCAASP INT DEFAULT NULL,
            DCAASSOC INT DEFAULT NULL,
            DCACACI VARCHAR(44) DEFAULT NULL,
            DCACAS INT DEFAULT NULL,
            DCACIS INT DEFAULT NULL,
            DCACISZ INT DEFAULT NULL,
            DCADATA INT DEFAULT NULL,
            DCADLR INT DEFAULT NULL,
            DCADSNAM VARCHAR(44) DEFAULT NULL,
            DCAESDS INT DEFAULT NULL,
            DCAEXC INT DEFAULT NULL,
            DCAFLAG1 INT DEFAULT NULL,
            DCAFLAG2 INT DEFAULT NULL,
            DCAG4G INT DEFAULT NULL,
            DCAHARBA BIGINT DEFAULT NULL,
            DCAHARBC BIGINT DEFAULT NULL,
            DCAHURBA BIGINT DEFAULT NULL,
            DCAHURBC BIGINT DEFAULT NULL,
            DCAINDEX INT DEFAULT NULL,
            DCAINR INT DEFAULT NULL,
            DCAIXUPG INT DEFAULT NULL,
            DCAKLN INT DEFAULT NULL,
            DCAKRDS INT DEFAULT NULL,
            DCAKR1ST INT DEFAULT NULL,
            DCAKSDS INT DEFAULT NULL,
            DCALDS INT DEFAULT NULL,
            DCANLR INT DEFAULT NULL,
            DCANSTAT INT DEFAULT NULL,
            DCARKP INT DEFAULT NULL,
            DCARRDS INT DEFAULT NULL,
            DCARTR INT DEFAULT NULL,
            DCASRCI INT DEFAULT NULL,
            DCASSOC_LEN INT DEFAULT NULL,
            DCATRDT INT DEFAULT NULL,
            DCAUPR INT DEFAULT NULL,
            DCAVRRDS INT DEFAULT NULL,
            DCAZFS INT DEFAULT NULL,
            PRIMARY KEY (id),
            KEY timestamp_idx (TIMESTAMP)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci`,
         `CREATE TABLE IF NOT EXISTS dcollect_ai (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DAIDATA_LEN INT DEFAULT NULL,
    DAIDDATE INT DEFAULT NULL,
    DAIDDSMR VARCHAR(100) DEFAULT NULL,
    DAIDDSNM VARCHAR(100) DEFAULT NULL,
    DAIDRTN VARCHAR(100) DEFAULT NULL,
    DAIDSRID VARCHAR(100) DEFAULT NULL,
    DAIDTIME VARCHAR(100) DEFAULT NULL,
    DAIGDATE VARCHAR(100) DEFAULT NULL,
    DAIGDSMR VARCHAR(100) DEFAULT NULL,
    DAIGDSNM VARCHAR(100) DEFAULT NULL,
    DAIGRTN VARCHAR(100) DEFAULT NULL,
    DAIGSRID VARCHAR(100) DEFAULT NULL,
    DAIGTIME VARCHAR(100) DEFAULT NULL,
    DAIMDATE VARCHAR(100) DEFAULT NULL,
    DAIMDSMR VARCHAR(100) DEFAULT NULL,
    DAIMDSNM VARCHAR(100) DEFAULT NULL,
    DAIMRTN VARCHAR(100) DEFAULT NULL,
    DAIMSRID VARCHAR(100) DEFAULT NULL,
    DAIMTIME VARCHAR(100) DEFAULT NULL,
    DAISDATE VARCHAR(100) DEFAULT NULL,
    DAISDSMR VARCHAR(100) DEFAULT NULL,
    DAISDSNM VARCHAR(100) DEFAULT NULL,
    DAISRTN VARCHAR(100) DEFAULT NULL,
    DAISSRID VARCHAR(100) DEFAULT NULL,
    DAISTIME VARCHAR(100) DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`,
 `CREATE TABLE IF NOT EXISTS dcollect_bc (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DBCASMS INT DEFAULT NULL,
    DBCCDMP INT DEFAULT NULL,
    DBCCYLCP INT DEFAULT NULL,
    DBCDATA_LEN INT DEFAULT NULL,
    DBCDATE INT DEFAULT NULL,
    DBCDEFMC VARCHAR(100) DEFAULT NULL,
    DBCDESC VARCHAR(100) DEFAULT NULL,
    DBCDGEOM VARCHAR(100) DEFAULT NULL,
    DBCDUNIT VARCHAR(100) DEFAULT NULL,
    DBCFLAGS INT DEFAULT NULL,
    DBCFLGDC INT DEFAULT NULL,
    DBCFSYSN INT DEFAULT NULL,
    DBCINVAL VARCHAR(100) DEFAULT NULL,
    DBCMCLEN INT DEFAULT NULL,
    DBCMCNAM INT DEFAULT NULL,
    DBCPDSE VARCHAR(100) DEFAULT NULL,
    DBCSCDSN INT DEFAULT NULL,
    DBCSEPNL VARCHAR(100) DEFAULT NULL,
    DBCSEPNM INT DEFAULT NULL,
    DBCSESC VARCHAR(100) DEFAULT NULL,
    DBCSFEAT INT DEFAULT NULL,
    DBCSNMTY VARCHAR(100) DEFAULT NULL,
    DBCSRST INT DEFAULT NULL,
    DBCSTAT VARCHAR(100) DEFAULT NULL,
    DBCSYSDT INT DEFAULT NULL,
    DBCSYSFT VARCHAR(100) DEFAULT NULL,
    DBCSYSNM VARCHAR(100) DEFAULT NULL,
    DBCSYSNS VARCHAR(100) DEFAULT NULL,
    DBCSYSNT INT DEFAULT NULL,
    DBCSYSPL INT DEFAULT NULL,
    DBCSYSTM INT DEFAULT NULL,
    DBCTIME INT DEFAULT NULL,
    DBCTRKSZ VARCHAR(100) DEFAULT NULL,
    DBCUNKWN INT DEFAULT NULL,
    DBCUSER INT DEFAULT NULL,
    DBCVALID VARCHAR(100) DEFAULT NULL,
    DBC32NAM INT DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`,
 `CREATE TABLE IF NOT EXISTS dcollect_d (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DCDACCT INT DEFAULT NULL,
    DCDADSI_LEN VARCHAR(100) DEFAULT NULL,
    DCDAENCR INT DEFAULT NULL,
    DCDAKLBL VARCHAR(100) DEFAULT NULL,
    DCDALLFG VARCHAR(100) DEFAULT NULL,
    DCDALLFX INT DEFAULT NULL,
    DCDALLSP INT DEFAULT NULL,
    DCDALLSX INT DEFAULT NULL,
    DCDATYPE INT DEFAULT NULL,
    DCDBDSZ VARCHAR(100) DEFAULT NULL,
    DCDBKLNG INT DEFAULT NULL,
    DCDCATF INT DEFAULT NULL,
    DCDCCSID INT DEFAULT NULL,
    DCDCGENC VARCHAR(100) DEFAULT NULL,
    DCDCHIND INT DEFAULT NULL,
    DCDCKDSI INT DEFAULT NULL,
    DCDCMPTV INT DEFAULT NULL,
    DCDCNCMP INT DEFAULT NULL,
    DCDCPOIT INT DEFAULT NULL,
    DCDCREDT INT DEFAULT NULL,
    DCDCTLRD DATETIME DEFAULT NULL,
    DCDCTYPE INT DEFAULT NULL,
    DCDCUDSZ INT DEFAULT NULL,
    DCDCZEDC INT DEFAULT NULL,
    DCDDATCL INT DEFAULT NULL,
    DCDDCLAS VARCHAR(100) DEFAULT NULL,
    DCDDCLNG VARCHAR(100) DEFAULT NULL,
    DCDDDMEX INT DEFAULT NULL,
    DCDDSCBF INT DEFAULT NULL,
    DCDDSGDA INT DEFAULT NULL,
    DCDDSGGS INT DEFAULT NULL,
    DCDDSGIS INT DEFAULT NULL,
    DCDDSGPO INT DEFAULT NULL,
    DCDDSGPS INT DEFAULT NULL,
    DCDDSGU INT DEFAULT NULL,
    DCDDSGVS INT DEFAULT NULL,
    DCDDSNAM INT DEFAULT NULL,
    DCDDSORG VARCHAR(100) DEFAULT NULL,
    DCDDSOR0 INT DEFAULT NULL,
    DCDDSOR1 INT DEFAULT NULL,
    DCDDSSER INT DEFAULT NULL,
    DCDDS9CR VARCHAR(100) DEFAULT NULL,
    DCDDS9F1 INT DEFAULT NULL,
    DCDEATRC VARCHAR(100) DEFAULT NULL,
    DCDEATRV INT DEFAULT NULL,
    DCDEDVVR INT DEFAULT NULL,
    DCDEMNGD INT DEFAULT NULL,
    DCDERROR INT DEFAULT NULL,
    DCDEXFLG INT DEFAULT NULL,
    DCDEXPDT INT DEFAULT NULL,
    DCDFCAR DATETIME DEFAULT NULL,
    DCDFLAG1 INT DEFAULT NULL,
    DCDFLAG2 INT DEFAULT NULL,
    DCDFLAG3 INT DEFAULT NULL,
    DCDFLAG5 INT DEFAULT NULL,
    DCDGDS VARCHAR(100) DEFAULT NULL,
    DCDGT64K INT DEFAULT NULL,
    DCDINICF INT DEFAULT NULL,
    DCDINTCG INT DEFAULT NULL,
    DCDJBNMC INT DEFAULT NULL,
    DCDLBKDT VARCHAR(100) DEFAULT NULL,
    DCDLRECL VARCHAR(100) DEFAULT NULL,
    DCDLSTRF INT DEFAULT NULL,
    DCDMCLAS DATETIME DEFAULT NULL,
    DCDMCLNG VARCHAR(100) DEFAULT NULL,
    DCDMGTCL INT DEFAULT NULL,
    DCDNMBFG VARCHAR(100) DEFAULT NULL,
    DCDNMBFX INT DEFAULT NULL,
    DCDNMBLK INT DEFAULT NULL,
    DCDNMBLX INT DEFAULT NULL,
    DCDNMEXT INT DEFAULT NULL,
    DCDNOFM1 INT DEFAULT NULL,
    DCDNOSPC INT DEFAULT NULL,
    DCDNOVVR INT DEFAULT NULL,
    DCDOVERA INT DEFAULT NULL,
    DCDPDSE INT DEFAULT NULL,
    DCDPDSEX INT DEFAULT NULL,
    DCDRACFD INT DEFAULT NULL,
    DCDREBLK INT DEFAULT NULL,
    DCDRECFA INT DEFAULT NULL,
    DCDRECFB INT DEFAULT NULL,
    DCDRECFC INT DEFAULT NULL,
    DCDRECFF INT DEFAULT NULL,
    DCDRECFM INT DEFAULT NULL,
    DCDRECFS INT DEFAULT NULL,
    DCDRECFT INT DEFAULT NULL,
    DCDRECFU INT DEFAULT NULL,
    DCDRECFV INT DEFAULT NULL,
    DCDRECRD INT DEFAULT NULL,
    DCDSCAFX INT DEFAULT NULL,
    DCDSCALL INT DEFAULT NULL,
    DCDSCALX INT DEFAULT NULL,
    DCDSCLAS INT DEFAULT NULL,
    DCDSCLNG VARCHAR(100) DEFAULT NULL,
    DCDSCNT INT DEFAULT NULL,
    DCDSECFG INT DEFAULT NULL,
    DCDSGLNG INT DEFAULT NULL,
    DCDSMSM INT DEFAULT NULL,
    DCDSTGCL INT DEFAULT NULL,
    DCDSTGRP VARCHAR(100) DEFAULT NULL,
    DCDSTNMC VARCHAR(100) DEFAULT NULL,
    DCDSTOGP VARCHAR(100) DEFAULT NULL,
    DCDSTRP VARCHAR(100) DEFAULT NULL,
    DCDTEMP INT DEFAULT NULL,
    DCDTIMEC INT DEFAULT NULL,
    DCDUDSIZ VARCHAR(100) DEFAULT NULL,
    DCDUSEFG INT DEFAULT NULL,
    DCDUSEFX INT DEFAULT NULL,
    DCDUSESP INT DEFAULT NULL,
    DCDUSESX INT DEFAULT NULL,
    DCDVOLSQ INT DEFAULT NULL,
    DCDVOLSR VARCHAR(100) DEFAULT NULL,
    DCDVSAMI VARCHAR(100) DEFAULT NULL,
    DCDXPSEV INT DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`,
 `CREATE TABLE IF NOT EXISTS dcollect_dc (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DDCAUNIT INT DEFAULT NULL,
    DDCAVREC INT DEFAULT NULL,
    DDCA2GB INT DEFAULT NULL,
    DDCBLK INT DEFAULT NULL,
    DDCBLKLM INT DEFAULT NULL,
    DDCBLMT VARCHAR(100) DEFAULT NULL,
    DDCBSZLM INT DEFAULT NULL,
    DDCBWOCI VARCHAR(100) DEFAULT NULL,
    DDCBWOIM INT DEFAULT NULL,
    DDCBWONO INT DEFAULT NULL,
    DDCBWOS INT DEFAULT NULL,
    DDCBWOTP INT DEFAULT NULL,
    DDCBYTES INT DEFAULT NULL,
    DDCCAMT INT DEFAULT NULL,
    DDCCAPCT INT DEFAULT NULL,
    DDCCFS INT DEFAULT NULL,
    DDCCIPCT INT DEFAULT NULL,
    DDCCISZ INT DEFAULT NULL,
    DDCCNTL INT DEFAULT NULL,
    DDCCNTLA INT DEFAULT NULL,
    DDCCNTLM INT DEFAULT NULL,
    DDCCNTLN INT DEFAULT NULL,
    DDCCNUL INT DEFAULT NULL,
    DDCCOMP INT DEFAULT NULL,
    DDCCT INT DEFAULT NULL,
    DDCDATA_LEN VARCHAR(100) DEFAULT NULL,
    DDCDATE INT DEFAULT NULL,
    DDCDESC VARCHAR(100) DEFAULT NULL,
    DDCDIBLK VARCHAR(100) DEFAULT NULL,
    DDCDKLBL INT DEFAULT NULL,
    DDCDKLBN INT DEFAULT NULL,
    DDCDSCF VARCHAR(100) DEFAULT NULL,
    DDCDSEXC VARCHAR(100) DEFAULT NULL,
    DDCDSEXR INT DEFAULT NULL,
    DDCDSFLG INT DEFAULT NULL,
    DDCDSHFS INT DEFAULT NULL,
    DDCDSLIB INT DEFAULT NULL,
    DDCDSLRG INT DEFAULT NULL,
    DDCDSNTY INT DEFAULT NULL,
    DDCDSNUL INT DEFAULT NULL,
    DDCDSNXT INT DEFAULT NULL,
    DDCDSPDS INT DEFAULT NULL,
    DDCDVC INT DEFAULT NULL,
    DDCDVCS INT DEFAULT NULL,
    DDCEANUL INT DEFAULT NULL,
    DDCEATNO INT DEFAULT NULL,
    DDCEATOP INT DEFAULT NULL,
    DDCEATTR INT DEFAULT NULL,
    DDCEEFM2 VARCHAR(100) DEFAULT NULL,
    DDCEEFM3 INT DEFAULT NULL,
    DDCEEFM4 INT DEFAULT NULL,
    DDCEFMT1 INT DEFAULT NULL,
    DDCEFMT2 INT DEFAULT NULL,
    DDCEFMT3 INT DEFAULT NULL,
    DDCEFMT4 INT DEFAULT NULL,
    DDCEXPDY INT DEFAULT NULL,
    DDCEXPYR INT DEFAULT NULL,
    DDCEX255 INT DEFAULT NULL,
    DDCFATTR INT DEFAULT NULL,
    DDCFAUN INT DEFAULT NULL,
    DDCFAVR INT DEFAULT NULL,
    DDCFA2GB INT DEFAULT NULL,
    DDCFCAF INT DEFAULT NULL,
    DDCFCIF INT DEFAULT NULL,
    DDCFCIS INT DEFAULT NULL,
    DDCFCOMP INT DEFAULT NULL,
    DDCFCT INT DEFAULT NULL,
    DDCFDIR INT DEFAULT NULL,
    DDCFEXP INT DEFAULT NULL,
    DDCFEXTC INT DEFAULT NULL,
    DDCFIMBD INT DEFAULT NULL,
    DDCFKLBL INT DEFAULT NULL,
    DDCFKLEN INT DEFAULT NULL,
    DDCFKOFF INT DEFAULT NULL,
    DDCFKYC1 INT DEFAULT NULL,
    DDCFKYC2 INT DEFAULT NULL,
    DDCFKYL1 INT DEFAULT NULL,
    DDCFKYL2 INT DEFAULT NULL,
    DDCFLOGR INT DEFAULT NULL,
    DDCFLREC INT DEFAULT NULL,
    DDCFMEDI INT DEFAULT NULL,
    DDCFMF INT DEFAULT NULL,
    DDCFMFB INT DEFAULT NULL,
    DDCFMFBS INT DEFAULT NULL,
    DDCFMFS INT DEFAULT NULL,
    DDCFMNUL INT DEFAULT NULL,
    DDCFMU INT DEFAULT NULL,
    DDCFMV INT DEFAULT NULL,
    DDCFMVB INT DEFAULT NULL,
    DDCFMVBS INT DEFAULT NULL,
    DDCFMVS INT DEFAULT NULL,
    DDCFOVRD INT DEFAULT NULL,
    DDCFPSEG INT DEFAULT NULL,
    DDCFPSP INT DEFAULT NULL,
    DDCFRECT INT DEFAULT NULL,
    DDCFRET INT DEFAULT NULL,
    DDCFRFM INT DEFAULT NULL,
    DDCFRLGS INT DEFAULT NULL,
    DDCFRLOG INT DEFAULT NULL,
    DDCFRMOD INT DEFAULT NULL,
    DDCFRORG INT DEFAULT NULL,
    DDCFRPLC INT DEFAULT NULL,
    DDCFRSP INT DEFAULT NULL,
    DDCFSCAL VARCHAR(100) DEFAULT NULL,
    DDCFSDB INT DEFAULT NULL,
    DDCFSSP INT DEFAULT NULL,
    DDCFVEA INT DEFAULT NULL,
    DDCFVOL INT DEFAULT NULL,
    DDCFVSP INT DEFAULT NULL,
    DDCFXREG INT DEFAULT NULL,
    DDCFXSYS INT DEFAULT NULL,
    DDCGSRDU INT DEFAULT NULL,
    DDCIDRC INT DEFAULT NULL,
    DDCIMBED INT DEFAULT NULL,
    DDCKB INT DEFAULT NULL,
    DDCKLBL1 INT DEFAULT NULL,
    DDCKLBL2 INT DEFAULT NULL,
    DDCKLBN1 INT DEFAULT NULL,
    DDCKLBN2 VARCHAR(100) DEFAULT NULL,
    DDCKLEN VARCHAR(100) DEFAULT NULL,
    DDCKOFF INT DEFAULT NULL,
    DDCKYCD1 INT DEFAULT NULL,
    DDCKYCD2 INT DEFAULT NULL,
    DDCLOGAL INT DEFAULT NULL,
    DDCLOGID INT DEFAULT NULL,
    DDCLOGLN VARCHAR(100) DEFAULT NULL,
    DDCLOGNM INT DEFAULT NULL,
    DDCLOGNO VARCHAR(100) DEFAULT NULL,
    DDCLOGRC INT DEFAULT NULL,
    DDCLOGRP INT DEFAULT NULL,
    DDCLOGRS INT DEFAULT NULL,
    DDCLOGUN INT DEFAULT NULL,
    DDCLRECL INT DEFAULT NULL,
    DDCLSIDS INT DEFAULT NULL,
    DDCMB INT DEFAULT NULL,
    DDCMEDA1 INT DEFAULT NULL,
    DDCMEDA2 INT DEFAULT NULL,
    DDCMEDA3 INT DEFAULT NULL,
    DDCMEDA4 INT DEFAULT NULL,
    DDCMEDA5 INT DEFAULT NULL,
    DDCMEDA6 INT DEFAULT NULL,
    DDCMEDA7 INT DEFAULT NULL,
    DDCMEDA8 INT DEFAULT NULL,
    DDCMEDA9 INT DEFAULT NULL,
    DDCMEDIA INT DEFAULT NULL,
    DDCMED10 INT DEFAULT NULL,
    DDCMED11 INT DEFAULT NULL,
    DDCMED12 INT DEFAULT NULL,
    DDCMED13 INT DEFAULT NULL,
    DDCMENUL INT DEFAULT NULL,
    DDCNAME INT DEFAULT NULL,
    DDCNMFLD VARCHAR(100) DEFAULT NULL,
    DDCNMLEN VARCHAR(100) DEFAULT NULL,
    DDCNOCMP INT DEFAULT NULL,
    DDCORGES INT DEFAULT NULL,
    DDCORGKS INT DEFAULT NULL,
    DDCORGLS INT DEFAULT NULL,
    DDCORGNL INT DEFAULT NULL,
    DDCORGRR INT DEFAULT NULL,
    DDCOVRD INT DEFAULT NULL,
    DDCPSCA INT DEFAULT NULL,
    DDCPSEG VARCHAR(100) DEFAULT NULL,
    DDCRABS VARCHAR(100) DEFAULT NULL,
    DDCRABSY INT DEFAULT NULL,
    DDCRABUS INT DEFAULT NULL,
    DDCRADO INT DEFAULT NULL,
    DDCRADW INT DEFAULT NULL,
    DDCRASO INT DEFAULT NULL,
    DDCRASW INT DEFAULT NULL,
    DDCRBIAS INT DEFAULT NULL,
    DDCRBYTE INT DEFAULT NULL,
    DDCRCORG VARCHAR(100) DEFAULT NULL,
    DDCRECFM INT DEFAULT NULL,
    DDCRECLM INT DEFAULT NULL,
    DDCRECTE INT DEFAULT NULL,
    DDCREDUC INT DEFAULT NULL,
    DDCREDUS INT DEFAULT NULL,
    DDCREPLC INT DEFAULT NULL,
    DDCRETPD INT DEFAULT NULL,
    DDCREUSE INT DEFAULT NULL,
    DDCRLS1 INT DEFAULT NULL,
    DDCRMODE VARCHAR(100) DEFAULT NULL,
    DDCRTNUL INT DEFAULT NULL,
    DDCSDB INT DEFAULT NULL,
    DDCSFLG INT DEFAULT NULL,
    DDCSHROP INT DEFAULT NULL,
    DDCSPAND INT DEFAULT NULL,
    DDCSPANN INT DEFAULT NULL,
    DDCSPANS INT DEFAULT NULL,
    DDCSPANY INT DEFAULT NULL,
    DDCSPEC INT DEFAULT NULL,
    DDCSPECA VARCHAR(100) DEFAULT NULL,
    DDCSPECB INT DEFAULT NULL,
    DDCSPECC INT DEFAULT NULL,
    DDCSPECD INT DEFAULT NULL,
    DDCSPEC1 INT DEFAULT NULL,
    DDCSPEC2 INT DEFAULT NULL,
    DDCSPEC3 INT DEFAULT NULL,
    DDCSPEC4 INT DEFAULT NULL,
    DDCSPEED INT DEFAULT NULL,
    DDCSPPRI INT DEFAULT NULL,
    DDCSPRLF INT DEFAULT NULL,
    DDCSPSEC INT DEFAULT NULL,
    DDCSTSP INT DEFAULT NULL,
    DDCTIME INT DEFAULT NULL,
    DDCUSER VARCHAR(100) DEFAULT NULL,
    DDCVBYT1 VARCHAR(100) DEFAULT NULL,
    DDCVINDX VARCHAR(100) DEFAULT NULL,
    DDCVOLCT INT DEFAULT NULL,
    DDCVSPU INT DEFAULT NULL,
    DDCVSPUK INT DEFAULT NULL,
    DDCVSPUM INT DEFAULT NULL,
    DDCVSPV INT DEFAULT NULL,
    DDCXREG INT DEFAULT NULL,
    DDCXSYS INT DEFAULT NULL,
    DDC128TK INT DEFAULT NULL,
    DDC18TRK INT DEFAULT NULL,
    DDC256TK INT DEFAULT NULL,
    DDC36TRK INT DEFAULT NULL,
    DDC384TK INT DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`,
 `CREATE TABLE IF NOT EXISTS dcollect_lb (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DLBCFCS INT DEFAULT NULL,
    DLBCURST INT DEFAULT NULL,
    DLBDATA_LEN INT DEFAULT NULL,
    DLBDCLEN INT DEFAULT NULL,
    DLBDCLNM INT DEFAULT NULL,
    DLBDCNAM VARCHAR(100) DEFAULT NULL,
    DLBDCONS VARCHAR(100) DEFAULT NULL,
    DLBDDATE INT DEFAULT NULL,
    DLBDEFDC VARCHAR(100) DEFAULT NULL,
    DLBDTAPE VARCHAR(100) DEFAULT NULL,
    DLBDTIME INT DEFAULT NULL,
    DLBDTYPE VARCHAR(100) DEFAULT NULL,
    DLBDUSER INT DEFAULT NULL,
    DLBD3995 VARCHAR(100) DEFAULT NULL,
    DLBD9246 INT DEFAULT NULL,
    DLBEDUNM INT DEFAULT NULL,
    DLBEDVT VARCHAR(100) DEFAULT NULL,
    DLBEJD INT DEFAULT NULL,
    DLBFLAGS INT DEFAULT NULL,
    DLBKEEP VARCHAR(100) DEFAULT NULL,
    DLBLCBID INT DEFAULT NULL,
    DLBLNAME INT DEFAULT NULL,
    DLBLPENO VARCHAR(100) DEFAULT NULL,
    DLBNAME INT DEFAULT NULL,
    DLBNMFLD VARCHAR(100) DEFAULT NULL,
    DLBNMLEN VARCHAR(100) DEFAULT NULL,
    DLBNOCON INT DEFAULT NULL,
    DLBNOOPT INT DEFAULT NULL,
    DLBNORST INT DEFAULT NULL,
    DLBNSTAT INT DEFAULT NULL,
    DLBOFFLN VARCHAR(100) DEFAULT NULL,
    DLBOMST INT DEFAULT NULL,
    DLBONLN VARCHAR(100) DEFAULT NULL,
    DLBPRVT INT DEFAULT NULL,
    DLBPSEUD INT DEFAULT NULL,
    DLBPURGE INT DEFAULT NULL,
    DLBREAL INT DEFAULT NULL,
    DLBREQST INT DEFAULT NULL,
    DLBSCRT INT DEFAULT NULL,
    DLBSOUT INT DEFAULT NULL,
    DLBSTAT INT DEFAULT NULL,
    DLBSYSST VARCHAR(100) DEFAULT NULL,
    DLBTYPE VARCHAR(100) DEFAULT NULL,
    DLB32NAM INT DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`,
 `CREATE TABLE IF NOT EXISTS dcollect_mc (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DMCACGT INT DEFAULT NULL,
    DMCACLTE INT DEFAULT NULL,
    DMCARNOL INT DEFAULT NULL,
    DMCAUTBK INT DEFAULT NULL,
    DMCBADM INT DEFAULT NULL,
    DMCBADU INT DEFAULT NULL,
    DMCBBOTH INT DEFAULT NULL,
    DMCBKDY INT DEFAULT NULL,
    DMCBKFLG INT DEFAULT NULL,
    DMCBKFQ INT DEFAULT NULL,
    DMCBKNP INT DEFAULT NULL,
    DMCBKUDC INT DEFAULT NULL,
    DMCBKVS VARCHAR(100) DEFAULT NULL,
    DMCBNONE INT DEFAULT NULL,
    DMCBVRD INT DEFAULT NULL,
    DMCCLLEN INT DEFAULT NULL,
    DMCCLNAM INT DEFAULT NULL,
    DMCCLOUD VARCHAR(100) DEFAULT NULL,
    DMCCL2DY VARCHAR(100) DEFAULT NULL,
    DMCCMAU INT DEFAULT NULL,
    DMCCPYPR INT DEFAULT NULL,
    DMCCPYRQ INT DEFAULT NULL,
    DMCCPYST INT DEFAULT NULL,
    DMCCPYTC INT DEFAULT NULL,
    DMCCPYTF INT DEFAULT NULL,
    DMCCTCPY INT DEFAULT NULL,
    DMCCTSRL INT DEFAULT NULL,
    DMCDATA_LEN INT DEFAULT NULL,
    DMCDATE INT DEFAULT NULL,
    DMCDESC VARCHAR(100) DEFAULT NULL,
    DMCDTNOL VARCHAR(100) DEFAULT NULL,
    DMCDYNOL INT DEFAULT NULL,
    DMCEAARC INT DEFAULT NULL,
    DMCEADEL INT DEFAULT NULL,
    DMCEANUL INT DEFAULT NULL,
    DMCEDAY INT DEFAULT NULL,
    DMCEXDAT INT DEFAULT NULL,
    DMCEXPAC INT DEFAULT NULL,
    DMCEXPDY INT DEFAULT NULL,
    DMCEXPF INT DEFAULT NULL,
    DMCEYEAR INT DEFAULT NULL,
    DMCFBKFQ INT DEFAULT NULL,
    DMCFBVER INT DEFAULT NULL,
    DMCFBVRD INT DEFAULT NULL,
    DMCFCTCP INT DEFAULT NULL,
    DMCFCTSR INT DEFAULT NULL,
    DMCFDATE INT DEFAULT NULL,
    DMCFDAYS INT DEFAULT NULL,
    DMCFEXDT INT DEFAULT NULL,
    DMCFEXDY INT DEFAULT NULL,
    DMCFIRST INT DEFAULT NULL,
    DMCFL1DY INT DEFAULT NULL,
    DMCFPELE INT DEFAULT NULL,
    DMCFPRDY INT DEFAULT NULL,
    DMCFRBK INT DEFAULT NULL,
    DMCFRLMG INT DEFAULT NULL,
    DMCFRNP INT DEFAULT NULL,
    DMCGDGFL INT DEFAULT NULL,
    DMCLAST INT DEFAULT NULL,
    DMCL1DY INT DEFAULT NULL,
    DMCL1NOL INT DEFAULT NULL,
    DMCL2LIM INT DEFAULT NULL,
    DMCMBOTH INT DEFAULT NULL,
    DMCMCMD INT DEFAULT NULL,
    DMCMIGF INT DEFAULT NULL,
    DMCMNONE INT DEFAULT NULL,
    DMCMRETF INT DEFAULT NULL,
    DMCMRTDY INT DEFAULT NULL,
    DMCNAME INT DEFAULT NULL,
    DMCNMFLD VARCHAR(100) DEFAULT NULL,
    DMCNMLEN VARCHAR(100) DEFAULT NULL,
    DMCNPNOL INT DEFAULT NULL,
    DMCNULL INT DEFAULT NULL,
    DMCPELEM INT DEFAULT NULL,
    DMCPEMN INT DEFAULT NULL,
    DMCPEQD INT DEFAULT NULL,
    DMCPEQM INT DEFAULT NULL,
    DMCPERD INT DEFAULT NULL,
    DMCPEYD INT DEFAULT NULL,
    DMCPEYM INT DEFAULT NULL,
    DMCPRCN INT DEFAULT NULL,
    DMCPRDY INT DEFAULT NULL,
    DMCPREL INT DEFAULT NULL,
    DMCPRIM INT DEFAULT NULL,
    DMCRBNOL INT DEFAULT NULL,
    DMCRDARC INT DEFAULT NULL,
    DMCRETF INT DEFAULT NULL,
    DMCRFMT INT DEFAULT NULL,
    DMCRLF INT DEFAULT NULL,
    DMCRLFCI INT DEFAULT NULL,
    DMCRLFCN INT DEFAULT NULL,
    DMCRLFNO INT DEFAULT NULL,
    DMCRLFYE INT DEFAULT NULL,
    DMCRLFYI INT DEFAULT NULL,
    DMCRLOMG INT DEFAULT NULL,
    DMCRPNOL INT DEFAULT NULL,
    DMCSPEC1 INT DEFAULT NULL,
    DMCSPEC2 INT DEFAULT NULL,
    DMCSZGT INT DEFAULT NULL,
    DMCSZLTE INT DEFAULT NULL,
    DMCTCDY INT DEFAULT NULL,
    DMCTCMN INT DEFAULT NULL,
    DMCTCYR INT DEFAULT NULL,
    DMCTIME INT DEFAULT NULL,
    DMCTSCR VARCHAR(100) DEFAULT NULL,
    DMCTSDY INT DEFAULT NULL,
    DMCTSLU INT DEFAULT NULL,
    DMCTSMN INT DEFAULT NULL,
    DMCTSYR INT DEFAULT NULL,
    DMCUSER INT DEFAULT NULL,
    DMCVPMD VARCHAR(100) DEFAULT NULL,
    DMCVPQD INT DEFAULT NULL,
    DMCVPQM INT DEFAULT NULL,
    DMCVPQT INT DEFAULT NULL,
    DMCVPRD VARCHAR(100) DEFAULT NULL,
    DMCVPYD INT DEFAULT NULL,
    DMCVPYM INT DEFAULT NULL,
    DMCVPYR INT DEFAULT NULL,
    DMCVSCD VARCHAR(100) DEFAULT NULL,
    DMCVSCM INT DEFAULT NULL,
    DMCVSCR INT DEFAULT NULL,
    DMCVSCY VARCHAR(100) DEFAULT NULL,
    DMCVSLU INT DEFAULT NULL,
    DMCVSUD VARCHAR(100) DEFAULT NULL,
    DMCVSUM INT DEFAULT NULL,
    DMCVSUY INT DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`,
 `CREATE TABLE IF NOT EXISTS dcollect_sc (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DSCACCES INT DEFAULT NULL,
    DSCACCNP INT DEFAULT NULL,
    DSCACCPR INT DEFAULT NULL,
    DSCACCRQ INT DEFAULT NULL,
    DSCACCST INT DEFAULT NULL,
    DSCAVAIL INT DEFAULT NULL,
    DSCAVLCN INT DEFAULT NULL,
    DSCAVLDC INT DEFAULT NULL,
    DSCAVLPR INT DEFAULT NULL,
    DSCAVLST INT DEFAULT NULL,
    DSCBAKUP INT DEFAULT NULL,
    DSCBIADC INT DEFAULT NULL,
    DSCBIARD INT DEFAULT NULL,
    DSCBIAWR INT DEFAULT NULL,
    DSCBUSP INT DEFAULT NULL,
    DSCCCHST INT DEFAULT NULL,
    DSCCMMFT VARCHAR(100) DEFAULT NULL,
    DSCCSLEN INT DEFAULT NULL,
    DSCCSNAM INT DEFAULT NULL,
    DSCDATA_LEN VARCHAR(100) DEFAULT NULL,
    DSCDATE INT DEFAULT NULL,
    DSCDCLS VARCHAR(100) DEFAULT NULL,
    DSCDESC INT DEFAULT NULL,
    DSCDFACC VARCHAR(100) DEFAULT NULL,
    DSCDFAVL VARCHAR(100) DEFAULT NULL,
    DSCDFGSP INT DEFAULT NULL,
    DSCDFSDR INT DEFAULT NULL,
    DSCDIRB INT DEFAULT NULL,
    DSCDIRCW INT DEFAULT NULL,
    DSCDIRR INT DEFAULT NULL,
    DSCDSSEP INT DEFAULT NULL,
    DSCFDCFW INT DEFAULT NULL,
    DSCFDCLS INT DEFAULT NULL,
    DSCFDIRB INT DEFAULT NULL,
    DSCFDIRR INT DEFAULT NULL,
    DSCFIAD INT DEFAULT NULL,
    DSCFLAGS INT DEFAULT NULL,
    DSCFLAG2 INT DEFAULT NULL,
    DSCFLAG3 INT DEFAULT NULL,
    DSCFOLS INT DEFAULT NULL,
    DSCFSCFW VARCHAR(100) DEFAULT NULL,
    DSCFSEQB INT DEFAULT NULL,
    DSCFSEQR INT DEFAULT NULL,
    DSCHLERD INT DEFAULT NULL,
    DSCHLEWR INT DEFAULT NULL,
    DSCIACDL INT DEFAULT NULL,
    DSCNAME INT DEFAULT NULL,
    DSCNMFLD INT DEFAULT NULL,
    DSCNMLEN VARCHAR(100) DEFAULT NULL,
    DSCPAV VARCHAR(100) DEFAULT NULL,
    DSCPAVS INT DEFAULT NULL,
    DSCSEQB INT DEFAULT NULL,
    DSCSEQCW INT DEFAULT NULL,
    DSCSEQR INT DEFAULT NULL,
    DSCSTOSL INT DEFAULT NULL,
    DSCSTSDR INT DEFAULT NULL,
    DSCSYNCD INT DEFAULT NULL,
    DSCTIER INT DEFAULT NULL,
    DSCTIERS INT DEFAULT NULL,
    DSCTIME INT DEFAULT NULL,
    DSCUSER INT DEFAULT NULL,
    DSCVERSN VARCHAR(100) DEFAULT NULL,
    DSCVERSP VARCHAR(100) DEFAULT NULL,
    DSCVFLG2 INT DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`,
 `CREATE TABLE IF NOT EXISTS dcollect_sg (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DSGABSYS INT DEFAULT NULL,
    DSGADSYS VARCHAR(100) DEFAULT NULL,
    DSGAMSYS VARCHAR(100) DEFAULT NULL,
    DSGCNFRM VARCHAR(100) DEFAULT NULL,
    DSGCNSMS VARCHAR(100) DEFAULT NULL,
    DSGCSMSS INT DEFAULT NULL,
    DSGCYLED INT DEFAULT NULL,
    DSGCYLST INT DEFAULT NULL,
    DSGDATA_LEN INT DEFAULT NULL,
    DSGDATE INT DEFAULT NULL,
    DSGDESC VARCHAR(100) DEFAULT NULL,
    DSGDIS VARCHAR(100) DEFAULT NULL,
    DSGDISN INT DEFAULT NULL,
    DSGDMPCL INT DEFAULT NULL,
    DSGDRVST VARCHAR(100) DEFAULT NULL,
    DSGDUMMY INT DEFAULT NULL,
    DSGENBL INT DEFAULT NULL,
    DSGEXNLN INT DEFAULT NULL,
    DSGEXNM INT DEFAULT NULL,
    DSGFABUP VARCHAR(100) DEFAULT NULL,
    DSGFADMP INT DEFAULT NULL,
    DSGFAMIG INT DEFAULT NULL,
    DSGFCYS INT DEFAULT NULL,
    DSGFDELP INT DEFAULT NULL,
    DSGFDRST INT DEFAULT NULL,
    DSGFGBKU INT DEFAULT NULL,
    DSGFHTHR INT DEFAULT NULL,
    DSGFIMIG INT DEFAULT NULL,
    DSGFLAGS INT DEFAULT NULL,
    DSGFLGDC INT DEFAULT NULL,
    DSGFLTHR INT DEFAULT NULL,
    DSGFPRST INT DEFAULT NULL,
    DSGFPSM VARCHAR(100) DEFAULT NULL,
    DSGFRETP INT DEFAULT NULL,
    DSGFTHRS INT DEFAULT NULL,
    DSGFTYPE INT DEFAULT NULL,
    DSGFVLFT INT DEFAULT NULL,
    DSGFVMAX INT DEFAULT NULL,
    DSGFVUNT INT DEFAULT NULL,
    DSGGBKUF VARCHAR(100) DEFAULT NULL,
    DSGGBNOL INT DEFAULT NULL,
    DSGNAME INT DEFAULT NULL,
    DSGNMFLD VARCHAR(100) DEFAULT NULL,
    DSGNMLEN VARCHAR(100) DEFAULT NULL,
    DSGOAMFL INT DEFAULT NULL,
    DSGOAMID INT DEFAULT NULL,
    DSGOBJ VARCHAR(100) DEFAULT NULL,
    DSGOBJBK INT DEFAULT NULL,
    DSGOFLOW INT DEFAULT NULL,
    DSGOLBNL INT DEFAULT NULL,
    DSGOLBNM INT DEFAULT NULL,
    DSGOLIBS VARCHAR(100) DEFAULT NULL,
    DSGPOOL VARCHAR(100) DEFAULT NULL,
    DSGQUI INT DEFAULT NULL,
    DSGQUIN INT DEFAULT NULL,
    DSGRERV INT DEFAULT NULL,
    DSGSBKPT VARCHAR(100) DEFAULT NULL,
    DSGSHTHR INT DEFAULT NULL,
    DSGSLTHR INT DEFAULT NULL,
    DSGSSTAT INT DEFAULT NULL,
    DSGSTAT VARCHAR(100) DEFAULT NULL,
    DSGSYSST INT DEFAULT NULL,
    DSGTAPE INT DEFAULT NULL,
    DSGTARGT INT DEFAULT NULL,
    DSGTBLGR INT DEFAULT NULL,
    DSGTIME VARCHAR(100) DEFAULT NULL,
    DSGTMSAP VARCHAR(100) DEFAULT NULL,
    DSGTOTAP INT DEFAULT NULL,
    DSGUSER INT DEFAULT NULL,
    DSGVFERR VARCHAR(100) DEFAULT NULL,
    DSGVFFER INT DEFAULT NULL,
    DSGVIO INT DEFAULT NULL,
    DSGVOLFT INT DEFAULT NULL,
    DSG0 INT DEFAULT NULL,
    DSG32NAM INT DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`,
 `CREATE TABLE IF NOT EXISTS dcollect_v (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DCVALLOC INT DEFAULT NULL,
    DCVCYLMG INT DEFAULT NULL,
    DCVDPTYP INT DEFAULT NULL,
    DCVDVNUM INT DEFAULT NULL,
    DCVDVTYP INT DEFAULT NULL,
    DCVEAVOL INT DEFAULT NULL,
    DCVEBYTK INT DEFAULT NULL,
    DCVELSPC INT DEFAULT NULL,
    DCVERROR INT DEFAULT NULL,
    DCVEVLCP INT DEFAULT NULL,
    DCVFCYLS INT DEFAULT NULL,
    DCVFDSCB INT DEFAULT NULL,
    DCVFLAG1 INT DEFAULT NULL,
    DCVFRAGI INT DEFAULT NULL,
    DCVFRESP INT DEFAULT NULL,
    DCVFREXT INT DEFAULT NULL,
    DCVFTRKS INT DEFAULT NULL,
    DCVFVIRS INT DEFAULT NULL,
    DCVINITL INT DEFAULT NULL,
    DCVINXEN INT DEFAULT NULL,
    DCVINXEX INT DEFAULT NULL,
    DCVINXST INT DEFAULT NULL,
    DCVLGEXT INT DEFAULT NULL,
    DCVMANGD INT DEFAULT NULL,
    DCVNMNGD INT DEFAULT NULL,
    DCVPERCT INT DEFAULT NULL,
    DCVPHYST INT DEFAULT NULL,
    DCVSGLNG INT DEFAULT NULL,
    DCVSGTCL INT DEFAULT NULL,
    DCVSHRDS VARCHAR(100) DEFAULT NULL,
    DCVSTGGP INT DEFAULT NULL,
    DCVTRALC VARCHAR(100) DEFAULT NULL,
    DCVTRFRG INT DEFAULT NULL,
    DCVTRFRX INT DEFAULT NULL,
    DCVTRFSP INT DEFAULT NULL,
    DCVTRLGE INT DEFAULT NULL,
    DCVTRPCT INT DEFAULT NULL,
    DCVTRVLC INT DEFAULT NULL,
    DCVUSATR INT DEFAULT NULL,
    DCVUSPUB INT DEFAULT NULL,
    DCVUSPVT INT DEFAULT NULL,
    DCVUSSTO INT DEFAULT NULL,
    DCVVLCAP INT DEFAULT NULL,
    DCVVOLI_LEN INT DEFAULT NULL,
    DCVVOLSR INT DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`,
 `CREATE TABLE IF NOT EXISTS dcollect_vl (
    id INT NOT NULL AUTO_INCREMENT,
    TIMESTAMP DATETIME DEFAULT NULL,
    DCUBCVER INT DEFAULT NULL,
    DCUDATE DATETIME DEFAULT NULL,
    DCULENG INT DEFAULT NULL,
    DCUOUTH_LEN INT DEFAULT NULL,
    DCURCTYP VARCHAR(100) DEFAULT NULL,
    DCURDW INT DEFAULT NULL,
    DCUSGVER INT DEFAULT NULL,
    DCUSYSID VARCHAR(100) DEFAULT NULL,
    DCUTIME VARCHAR(100) DEFAULT NULL,
    DCUTMSTP VARCHAR(100) DEFAULT NULL,
    DCUVERS INT DEFAULT NULL,
    DCUVERSC INT DEFAULT NULL,
    DCUVERS1 INT DEFAULT NULL,
    DCUVERS2 INT DEFAULT NULL,
    DVLBOXED INT DEFAULT NULL,
    DVLCNSMS INT DEFAULT NULL,
    DVLCONV INT DEFAULT NULL,
    DVLCSMSS INT DEFAULT NULL,
    DVLDATA_LEN INT DEFAULT NULL,
    DVLDATE INT DEFAULT NULL,
    DVLDIS VARCHAR(100) DEFAULT NULL,
    DVLDISN INT DEFAULT NULL,
    DVLENBL INT DEFAULT NULL,
    DVLFLAGS INT DEFAULT NULL,
    DVLFLGDC VARCHAR(100) DEFAULT NULL,
    DVLMVSS INT DEFAULT NULL,
    DVLNFREE INT DEFAULT NULL,
    DVLNLEVL INT DEFAULT NULL,
    DVLNLEXT INT DEFAULT NULL,
    DVLNMFLD INT DEFAULT NULL,
    DVLNMLEN VARCHAR(100) DEFAULT NULL,
    DVLNRDY INT DEFAULT NULL,
    DVLNSTAT INT DEFAULT NULL,
    DVLNTCPY VARCHAR(100) DEFAULT NULL,
    DVLNUCBA INT DEFAULT NULL,
    DVLN0CNT INT DEFAULT NULL,
    DVLOFFLN INT DEFAULT NULL,
    DVLONLN INT DEFAULT NULL,
    DVLPOFF INT DEFAULT NULL,
    DVLQUI INT DEFAULT NULL,
    DVLQUIN INT DEFAULT NULL,
    DVLROA INT DEFAULT NULL,
    DVLSG INT DEFAULT NULL,
    DVLSGLEN VARCHAR(100) DEFAULT NULL,
    DVLSMSS INT DEFAULT NULL,
    DVLSSTAT INT DEFAULT NULL,
    DVLSTGRP VARCHAR(100) DEFAULT NULL,
    DVLSTMVS VARCHAR(100) DEFAULT NULL,
    DVLSTSMS INT DEFAULT NULL,
    DVLTIME INT DEFAULT NULL,
    DVLTRKCP VARCHAR(100) DEFAULT NULL,
    DVLTRKEX INT DEFAULT NULL,
    DVLTRKFR INT DEFAULT NULL,
    DVLTRKSZ INT DEFAULT NULL,
    DVLUSER INT DEFAULT NULL,
    DVLVSER VARCHAR(100) DEFAULT NULL,
    DVL0 VARCHAR(100) DEFAULT NULL,
    DVL32NAM INT DEFAULT NULL,
    PRIMARY KEY (id),
    KEY timestamp_idx (TIMESTAMP)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;`
        ];

    for (const query of createTableQueries) {
        try {
            await connection.query(query);
            console.log('Successfully executed table creation query');
        } catch (error) {
            console.error('Error creating table:', error);
            throw error;
        }
    }

    // Verify tables were created
    const [tablesAfter] = await connection.query('SHOW TABLES');
    const existingTablesAfter = tablesAfter.map(t => Object.values(t)[0]);
    console.log('Tables after creation:', existingTablesAfter);
}

function promisifyFtpCommand(ftpClient, command, ...args) {
    return new Promise((resolve, reject) => {
        ftpClient[command](...args, function(err, result) {
            if (err) reject(err);
            else resolve(result);
        });
    });
}

async function loadDataFromFTPToMySQL(ftpClient, mysqlConnection, remotePath, tableName, columns) {
    return new Promise((resolve, reject) => {
        ftpClient.get(remotePath, async (err, readStream) => {
            if (err) {
                console.error(`Error getting file ${remotePath}:`, err);
                reject(err);
                return;
            }

            console.log(`Started processing file: ${remotePath}`);

            const passthroughStream = new stream.PassThrough();
            readStream.pipe(passthroughStream);

            const sql = `
                SET NAMES utf8mb4;
                SET CHARACTER SET utf8mb4;
                SET character_set_connection=utf8mb4;
                SET SESSION sql_mode = '';
                
                LOAD DATA LOCAL INFILE 'stdin' 
                INTO TABLE ${tableName}
                CHARACTER SET utf8mb4
                FIELDS TERMINATED BY ',' 
                OPTIONALLY ENCLOSED BY '"' 
                LINES TERMINATED BY '\\n' 
                IGNORE 1 LINES
                (${columns.join(', ')})
            `;

            try {
                await mysqlConnection.query("SET NAMES utf8mb4");
                const [result] = await mysqlConnection.query({
                    sql: sql,
                    infileStreamFactory: () => passthroughStream
                });
                
                const [rows] = await mysqlConnection.query(`SELECT ROW_COUNT() as count`);
                const affectedRows = rows[0].count;
                
                console.log(`Data loaded into ${tableName}: ${affectedRows} rows affected`);
                resolve(result);
            } catch (error) {
                console.error(`Error loading data into ${tableName}:`, error);
                reject(error);
            }
        });
    });
}

async function checkForNewFiles(ftpClient, mysqlConnection, startDate, endDate, lpar, metrics) {
    console.log(`Checking for new files for ${lpar} from ${startDate} to ${endDate || 'now'}`);
    
    try {
        const visitedDirs = await new Promise((resolve, reject) => {
            dcolJSONcontroller.readLparData(lpar, (err, data) => {
                if (err) reject(err);
                else resolve(data);
            });
        });
        
        await promisifyFtpCommand(ftpClient, 'cwd', config.dds[lpar].dcol.ftp.directory);
        const list = await promisifyFtpCommand(ftpClient, 'list');

        const startDateTime = new Date(startDate);
        const endDateTime = endDate ? new Date(endDate) : new Date();

        const newDirs = list.filter(function(item) {
            if (item.type !== 'd') return false;
            const dirDate = parseDirName(item.name);
            if (!dirDate) return false;
            const isNewDir = !visitedDirs[item.name];
            return isNewDir && dirDate >= startDateTime && dirDate <= endDateTime;
        });

        console.log(`Found ${newDirs.length} new directories to process for ${lpar}`);

        for (const dir of newDirs) {
            const fullPath = path.join(config.dds[lpar].dcol.ftp.directory, dir.name);
            try {
                await processDirectory(ftpClient, mysqlConnection, fullPath, lpar, metrics);
                const dirDate = parseDirName(dir.name);
                const updateData = { [dir.name]: dirDate.toISOString() };
                await new Promise((resolve, reject) => {
                    dcolJSONcontroller.updateLparData(lpar, updateData, (updateErr, updatedData) => {
                        if (updateErr) reject(updateErr);
                        else {
                            console.log('Processed and updated ' + lpar + '.json with ' + dir.name);
                            resolve(updatedData);
                        }
                    });
                });
            } catch (error) {
                console.error('Error processing directory ' + dir.name + ' for ' + lpar + ':', error);
            }
        }
       
        console.log(`Finished processing ${newDirs.length} new directories for ${lpar}`);
        return newDirs.length;
    } catch (error) {
        console.error('Error in checkForNewFiles:', error);
        throw error;
    }
}

async function processDirectory(ftpClient, mysqlConnection, dirPath, lpar, metrics) {
    console.log(`Processing directory: ${dirPath}`);
    
    try {
        await promisifyFtpCommand(ftpClient, 'cwd', dirPath);
        const files = await promisifyFtpCommand(ftpClient, 'list');

        for (const file of files) {
            if (file.type === '-' && file.name.endsWith('.csv')) {
                const tableName = getTableNameFromFileName(file.name);
                if (tableName && metrics.includes(tableName)) {
                    try {
                        await loadDataFromFTPToMySQL(
                            ftpClient,
                            mysqlConnection,
                            file.name,
                            tableName,
                            tableHeaders[tableName]
                        );
                    } catch (error) {
                        console.error(`Error processing ${file.name}:`, error);
                    }
                }
            }
        }
    } catch (error) {
        console.error(`Error processing directory ${dirPath}:`, error);
    } finally {
        try {
            await promisifyFtpCommand(ftpClient, 'cwd', config.dds[lpar].dcol.ftp.directory);
        } catch (error) {
            console.error(`Error changing back to base directory:`, error);
        }
    }
}

async function startDCOL(req, res) {
    const { startDate, endDate, lpar, metrics, continuousMonitoring } = req.body;
    console.log(`startDCOL called with params:`, { startDate, endDate, lpar, metrics, continuousMonitoring });

    if (runningProcesses[lpar] && runningProcesses[lpar].isRunning) {
        return res.status(400).json({ success: false, message: `DCOL process is already running for ${lpar}` });
    }

    runningProcesses[lpar] = { 
        isRunning: true, 
        continuousMonitoring: continuousMonitoring,
        startDate: startDate,
        endDate: continuousMonitoring ? null : endDate
    };

    let mysqlConnection;
    let ftpClient;
    let databaseCreated = false;

    try {
        // Create MySQL connection without database specified
        mysqlConnection = await mysql.createConnection({
            host: config.dds[lpar].dcol.mysql.host,
            user: config.dds[lpar].dcol.mysql.user,
            password: config.dds[lpar].dcol.mysql.password,
            multipleStatements: true
        });
        console.log('MySQL connection established');

        // Check if database exists
        const [rows] = await mysqlConnection.query(`SHOW DATABASES LIKE '${lpar}'`);
        if (rows.length === 0) {
            // Create database
            await mysqlConnection.query(`CREATE DATABASE ${lpar}`);
            databaseCreated = true;
            console.log(`Database ${lpar} created`);
        } else {
            console.log(`Database ${lpar} already exists`);
        }

        // Use the database
        await mysqlConnection.query(`USE ${lpar}`);
        console.log(`Using database ${lpar}`);

        // Always create tables if they don't exist
        await createTables(mysqlConnection);
        console.log('Ensured tables exist');

        // Initialize or get DCOL memory
        const visitedDirs = await new Promise((resolve, reject) => {
            dcolJSONcontroller.readLparData(lpar, (err, data) => {
                if (err) {
                    // If error reading, initialize empty memory
                    dcolJSONcontroller.writeLparData(lpar, {}, (writeErr) => {
                        if (writeErr) reject(writeErr);
                        else resolve({});
                    });
                } else {
                    resolve(data || {});
                }
            });
        });
        console.log('DCOL memory initialized/loaded');

        // Start FTP connection
        ftpClient = new FTP();
        await new Promise((resolve, reject) => {
            ftpClient.on('ready', () => {
                console.log('FTP connection established');
                resolve();
            });
            ftpClient.on('error', reject);
            ftpClient.connect({
                host: config.dds[lpar].ddsbaseurl,
                user: config.dds[lpar].ddsuser,
                password: config.dds[lpar].ddspwd,
            });
        });

        console.log('Starting to check for new files');
        if (continuousMonitoring) {
            await checkForNewFiles(ftpClient, mysqlConnection, startDate, null, lpar, metrics);
            startContinuousMonitoring(lpar, metrics);
        } else {
            await checkForNewFiles(ftpClient, mysqlConnection, startDate, endDate, lpar, metrics);
            runningProcesses[lpar].isRunning = false;
        }
        console.log('Finished checking for new files');

        res.json({ 
            success: true, 
            message: continuousMonitoring ? 'DCOL process started and running continuously' : 'DCOL process completed successfully',
            databaseCreated: databaseCreated
        });
    } catch (error) {
        console.error('Error in startDCOL:', error);
        delete runningProcesses[lpar];
        res.status(500).json({ success: false, message: 'Error in DCOL process', error: error.message });
    } finally {
        if (!continuousMonitoring) {
            if (mysqlConnection) {
                try {
                    await mysqlConnection.end();
                    console.log('MySQL connection closed.');
                } catch (err) {
                    console.error('Error closing MySQL connection:', err);
                }
            }
            if (ftpClient && ftpClient.connected) {
                ftpClient.end();
                console.log('FTP connection closed.');
            }
        }
    }
}

function startContinuousMonitoring(lpar, metrics) {
    const checkInterval = parseInt(config.dds[lpar].dcol.checkInterval);

    monitoringIntervals[lpar] = setInterval(async () => {
        let mysqlConnection;
        let ftpClient;

        try {
            mysqlConnection = await mysql.createConnection({
                host: config.dds[lpar].dcol.mysql.host,
                user: config.dds[lpar].dcol.mysql.user,
                password: config.dds[lpar].dcol.mysql.password,
                database: lpar,
                multipleStatements: true
            });

            ftpClient = new FTP();
            await new Promise((resolve, reject) => {
                ftpClient.on('ready', resolve);
                ftpClient.on('error', reject);
                ftpClient.connect({
                    host: config.dds[lpar].ddsbaseurl,
                    user: config.dds[lpar].ddsuser,
                    password: config.dds[lpar].ddspwd,
                });
            });

            const visitedDirs = await new Promise((resolve, reject) => {
                dcolJSONcontroller.readLparData(lpar, (err, data) => {
                    if (err) reject(err);
                    else resolve(data);
                });
            });

            const lastProcessedDate = Object.keys(visitedDirs).length > 0
                ? new Date(Math.max(...Object.values(visitedDirs).map(d => new Date(d))))
                : runningProcesses[lpar].startDate;

            await checkForNewFiles(ftpClient, mysqlConnection, lastProcessedDate, null, lpar, metrics);

        } catch (error) {
            console.error(`Error in continuous monitoring for ${lpar}:`, error);
        } finally {
            if (mysqlConnection) await mysqlConnection.end();
            if (ftpClient) ftpClient.end();
        }
    }, checkInterval * 60000);
}

async function clearDatabase(req, res) {
    const { lpar } = req.body;
    const mysqlConfig = {
        ...config.dds[lpar].dcol.mysql,
        database: lpar,
    };

    let connection;
    try {
        connection = await mysql.createConnection(mysqlConfig);

        const tables = ['dcollect_a', 'dcollect_ai', 'dcollect_bc', 'dcollect_d', 'dcollect_dc', 
                       'dcollect_lb', 'dcollect_mc', 'dcollect_sc', 'dcollect_sg', 'dcollect_v', 'dcollect_vl'];
        for (const table of tables) {
            await connection.query(`TRUNCATE TABLE ${table}`);
        }

        await new Promise((resolve, reject) => {
            dcolJSONcontroller.writeLparData(lpar, {}, (err) => {
                if (err) reject(err);
                else resolve();
            });
        });

        if (runningProcesses[lpar]) {
            delete runningProcesses[lpar];
        }

        res.json({ success: true, message: `All tables in database ${lpar} and DCOL memory cleared successfully` });
    } catch (error) {
        console.error('Error clearing database and DCOL memory:', error);
        res.json({ success: false, message: 'Failed to clear database and DCOL memory: ' + error.message });
    } finally {
        if (connection) await connection.end();
    }
}

function stopContinuousMonitoring(req, res) {
    const { lpar } = req.body;
    console.log(`Attempting to stop DCOL process for ${lpar}`);

    if (runningProcesses[lpar]) {
        if (monitoringIntervals[lpar]) {
            clearInterval(monitoringIntervals[lpar]);
            delete monitoringIntervals[lpar];
        }

        if (runningProcesses[lpar].mysqlConnection) {
            runningProcesses[lpar].mysqlConnection.end();
        }

        if (runningProcesses[lpar].ftpClient) {
            runningProcesses[lpar].ftpClient.end();
        }

        delete runningProcesses[lpar];
        res.json({ success: true, message: `Stopped DCOL process for ${lpar}` });
    } else {
        res.status(400).json({ success: false, message: `No active DCOL process for ${lpar}` });
    }
}

function getRunningProcesses(req, res) {
    const runningProcessesInfo = {};
    for (const lpar in runningProcesses) {
        runningProcessesInfo[lpar] = {
            isRunning: runningProcesses[lpar].isRunning,
            continuousMonitoring: runningProcesses[lpar].continuousMonitoring
        };
    }
    res.json(runningProcessesInfo);
}

module.exports = {
    startDCOL,
    clearDatabase,
    stopContinuousMonitoring,
    getRunningProcesses
};